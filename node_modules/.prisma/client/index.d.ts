
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model Shop
 * 
 */
export type Shop = $Result.DefaultSelection<Prisma.$ShopPayload>
/**
 * Model ProductsShop
 * 
 */
export type ProductsShop = $Result.DefaultSelection<Prisma.$ProductsShopPayload>
/**
 * Model ProductsCustomer
 * 
 */
export type ProductsCustomer = $Result.DefaultSelection<Prisma.$ProductsCustomerPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Customers
 * const customers = await prisma.customer.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Customers
   * const customers = await prisma.customer.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs>;

  /**
   * `prisma.shop`: Exposes CRUD operations for the **Shop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shops
    * const shops = await prisma.shop.findMany()
    * ```
    */
  get shop(): Prisma.ShopDelegate<ExtArgs>;

  /**
   * `prisma.productsShop`: Exposes CRUD operations for the **ProductsShop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductsShops
    * const productsShops = await prisma.productsShop.findMany()
    * ```
    */
  get productsShop(): Prisma.ProductsShopDelegate<ExtArgs>;

  /**
   * `prisma.productsCustomer`: Exposes CRUD operations for the **ProductsCustomer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductsCustomers
    * const productsCustomers = await prisma.productsCustomer.findMany()
    * ```
    */
  get productsCustomer(): Prisma.ProductsCustomerDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.11.0
   * Query Engine version: efd2449663b3d73d637ea1fd226bafbcf45b3102
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Customer: 'Customer',
    Shop: 'Shop',
    ProductsShop: 'ProductsShop',
    ProductsCustomer: 'ProductsCustomer'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'customer' | 'shop' | 'productsShop' | 'productsCustomer'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>,
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      Shop: {
        payload: Prisma.$ShopPayload<ExtArgs>
        fields: Prisma.ShopFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShopFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShopPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShopFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          findFirst: {
            args: Prisma.ShopFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShopPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShopFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          findMany: {
            args: Prisma.ShopFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>[]
          }
          create: {
            args: Prisma.ShopCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          createMany: {
            args: Prisma.ShopCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ShopDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          update: {
            args: Prisma.ShopUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          deleteMany: {
            args: Prisma.ShopDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ShopUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ShopUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          aggregate: {
            args: Prisma.ShopAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateShop>
          }
          groupBy: {
            args: Prisma.ShopGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ShopGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShopCountArgs<ExtArgs>,
            result: $Utils.Optional<ShopCountAggregateOutputType> | number
          }
        }
      }
      ProductsShop: {
        payload: Prisma.$ProductsShopPayload<ExtArgs>
        fields: Prisma.ProductsShopFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductsShopFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsShopPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductsShopFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsShopPayload>
          }
          findFirst: {
            args: Prisma.ProductsShopFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsShopPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductsShopFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsShopPayload>
          }
          findMany: {
            args: Prisma.ProductsShopFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsShopPayload>[]
          }
          create: {
            args: Prisma.ProductsShopCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsShopPayload>
          }
          createMany: {
            args: Prisma.ProductsShopCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductsShopDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsShopPayload>
          }
          update: {
            args: Prisma.ProductsShopUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsShopPayload>
          }
          deleteMany: {
            args: Prisma.ProductsShopDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductsShopUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductsShopUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsShopPayload>
          }
          aggregate: {
            args: Prisma.ProductsShopAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductsShop>
          }
          groupBy: {
            args: Prisma.ProductsShopGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductsShopGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductsShopCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductsShopCountAggregateOutputType> | number
          }
        }
      }
      ProductsCustomer: {
        payload: Prisma.$ProductsCustomerPayload<ExtArgs>
        fields: Prisma.ProductsCustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductsCustomerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsCustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductsCustomerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsCustomerPayload>
          }
          findFirst: {
            args: Prisma.ProductsCustomerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsCustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductsCustomerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsCustomerPayload>
          }
          findMany: {
            args: Prisma.ProductsCustomerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsCustomerPayload>[]
          }
          create: {
            args: Prisma.ProductsCustomerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsCustomerPayload>
          }
          createMany: {
            args: Prisma.ProductsCustomerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductsCustomerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsCustomerPayload>
          }
          update: {
            args: Prisma.ProductsCustomerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsCustomerPayload>
          }
          deleteMany: {
            args: Prisma.ProductsCustomerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductsCustomerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductsCustomerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsCustomerPayload>
          }
          aggregate: {
            args: Prisma.ProductsCustomerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductsCustomer>
          }
          groupBy: {
            args: Prisma.ProductsCustomerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductsCustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductsCustomerCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductsCustomerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    productsProductsCustomer: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productsProductsCustomer?: boolean | CustomerCountOutputTypeCountProductsProductsCustomerArgs
  }

  // Custom InputTypes

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountProductsProductsCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductsCustomerWhereInput
  }



  /**
   * Count Type ShopCountOutputType
   */

  export type ShopCountOutputType = {
    productsProductsShop: number
  }

  export type ShopCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productsProductsShop?: boolean | ShopCountOutputTypeCountProductsProductsShopArgs
  }

  // Custom InputTypes

  /**
   * ShopCountOutputType without action
   */
  export type ShopCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopCountOutputType
     */
    select?: ShopCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ShopCountOutputType without action
   */
  export type ShopCountOutputTypeCountProductsProductsShopArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductsShopWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    id: number | null
  }

  export type CustomerSumAggregateOutputType = {
    id: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    email: number
    password: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    id?: true
  }

  export type CustomerSumAggregateInputType = {
    id?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: number
    email: string
    password: string
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    productsProductsCustomer?: boolean | Customer$productsProductsCustomerArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
  }

  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productsProductsCustomer?: boolean | Customer$productsProductsCustomerArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      productsProductsCustomer: Prisma.$ProductsCustomerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }


  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CustomerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Customer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CustomerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CustomerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
    **/
    create<T extends CustomerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Customers.
     *     @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     *     @example
     *     // Create many Customers
     *     const customer = await prisma.customer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CustomerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
    **/
    delete<T extends CustomerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CustomerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CustomerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CustomerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
    **/
    upsert<T extends CustomerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    productsProductsCustomer<T extends Customer$productsProductsCustomerArgs<ExtArgs> = {}>(args?: Subset<T, Customer$productsProductsCustomerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductsCustomerPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Customer model
   */ 
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'Int'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly password: FieldRef<"Customer", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }


  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }


  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }


  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }


  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
  }


  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }


  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
  }


  /**
   * Customer.productsProductsCustomer
   */
  export type Customer$productsProductsCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCustomer
     */
    select?: ProductsCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsCustomerInclude<ExtArgs> | null
    where?: ProductsCustomerWhereInput
    orderBy?: ProductsCustomerOrderByWithRelationInput | ProductsCustomerOrderByWithRelationInput[]
    cursor?: ProductsCustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsCustomerScalarFieldEnum | ProductsCustomerScalarFieldEnum[]
  }


  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
  }



  /**
   * Model Shop
   */

  export type AggregateShop = {
    _count: ShopCountAggregateOutputType | null
    _avg: ShopAvgAggregateOutputType | null
    _sum: ShopSumAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  export type ShopAvgAggregateOutputType = {
    id: number | null
  }

  export type ShopSumAggregateOutputType = {
    id: number | null
  }

  export type ShopMinAggregateOutputType = {
    id: number | null
    shopName: string | null
    password: string | null
  }

  export type ShopMaxAggregateOutputType = {
    id: number | null
    shopName: string | null
    password: string | null
  }

  export type ShopCountAggregateOutputType = {
    id: number
    shopName: number
    password: number
    _all: number
  }


  export type ShopAvgAggregateInputType = {
    id?: true
  }

  export type ShopSumAggregateInputType = {
    id?: true
  }

  export type ShopMinAggregateInputType = {
    id?: true
    shopName?: true
    password?: true
  }

  export type ShopMaxAggregateInputType = {
    id?: true
    shopName?: true
    password?: true
  }

  export type ShopCountAggregateInputType = {
    id?: true
    shopName?: true
    password?: true
    _all?: true
  }

  export type ShopAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shop to aggregate.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shops
    **/
    _count?: true | ShopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShopAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShopSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopMaxAggregateInputType
  }

  export type GetShopAggregateType<T extends ShopAggregateArgs> = {
        [P in keyof T & keyof AggregateShop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShop[P]>
      : GetScalarType<T[P], AggregateShop[P]>
  }




  export type ShopGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShopWhereInput
    orderBy?: ShopOrderByWithAggregationInput | ShopOrderByWithAggregationInput[]
    by: ShopScalarFieldEnum[] | ShopScalarFieldEnum
    having?: ShopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopCountAggregateInputType | true
    _avg?: ShopAvgAggregateInputType
    _sum?: ShopSumAggregateInputType
    _min?: ShopMinAggregateInputType
    _max?: ShopMaxAggregateInputType
  }

  export type ShopGroupByOutputType = {
    id: number
    shopName: string
    password: string
    _count: ShopCountAggregateOutputType | null
    _avg: ShopAvgAggregateOutputType | null
    _sum: ShopSumAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  type GetShopGroupByPayload<T extends ShopGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopGroupByOutputType[P]>
            : GetScalarType<T[P], ShopGroupByOutputType[P]>
        }
      >
    >


  export type ShopSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopName?: boolean
    password?: boolean
    productsProductsShop?: boolean | Shop$productsProductsShopArgs<ExtArgs>
    _count?: boolean | ShopCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shop"]>

  export type ShopSelectScalar = {
    id?: boolean
    shopName?: boolean
    password?: boolean
  }

  export type ShopInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productsProductsShop?: boolean | Shop$productsProductsShopArgs<ExtArgs>
    _count?: boolean | ShopCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ShopPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Shop"
    objects: {
      productsProductsShop: Prisma.$ProductsShopPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      shopName: string
      password: string
    }, ExtArgs["result"]["shop"]>
    composites: {}
  }


  type ShopGetPayload<S extends boolean | null | undefined | ShopDefaultArgs> = $Result.GetResult<Prisma.$ShopPayload, S>

  type ShopCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShopFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShopCountAggregateInputType | true
    }

  export interface ShopDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shop'], meta: { name: 'Shop' } }
    /**
     * Find zero or one Shop that matches the filter.
     * @param {ShopFindUniqueArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShopFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ShopFindUniqueArgs<ExtArgs>>
    ): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Shop that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ShopFindUniqueOrThrowArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ShopFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ShopFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Shop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindFirstArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShopFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ShopFindFirstArgs<ExtArgs>>
    ): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Shop that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindFirstOrThrowArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ShopFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ShopFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Shops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shops
     * const shops = await prisma.shop.findMany()
     * 
     * // Get first 10 Shops
     * const shops = await prisma.shop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shopWithIdOnly = await prisma.shop.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShopFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ShopFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Shop.
     * @param {ShopCreateArgs} args - Arguments to create a Shop.
     * @example
     * // Create one Shop
     * const Shop = await prisma.shop.create({
     *   data: {
     *     // ... data to create a Shop
     *   }
     * })
     * 
    **/
    create<T extends ShopCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ShopCreateArgs<ExtArgs>>
    ): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Shops.
     *     @param {ShopCreateManyArgs} args - Arguments to create many Shops.
     *     @example
     *     // Create many Shops
     *     const shop = await prisma.shop.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShopCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ShopCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Shop.
     * @param {ShopDeleteArgs} args - Arguments to delete one Shop.
     * @example
     * // Delete one Shop
     * const Shop = await prisma.shop.delete({
     *   where: {
     *     // ... filter to delete one Shop
     *   }
     * })
     * 
    **/
    delete<T extends ShopDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ShopDeleteArgs<ExtArgs>>
    ): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Shop.
     * @param {ShopUpdateArgs} args - Arguments to update one Shop.
     * @example
     * // Update one Shop
     * const shop = await prisma.shop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShopUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ShopUpdateArgs<ExtArgs>>
    ): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Shops.
     * @param {ShopDeleteManyArgs} args - Arguments to filter Shops to delete.
     * @example
     * // Delete a few Shops
     * const { count } = await prisma.shop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShopDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ShopDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shops
     * const shop = await prisma.shop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShopUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ShopUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shop.
     * @param {ShopUpsertArgs} args - Arguments to update or create a Shop.
     * @example
     * // Update or create a Shop
     * const shop = await prisma.shop.upsert({
     *   create: {
     *     // ... data to create a Shop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shop we want to update
     *   }
     * })
    **/
    upsert<T extends ShopUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ShopUpsertArgs<ExtArgs>>
    ): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopCountArgs} args - Arguments to filter Shops to count.
     * @example
     * // Count the number of Shops
     * const count = await prisma.shop.count({
     *   where: {
     *     // ... the filter for the Shops we want to count
     *   }
     * })
    **/
    count<T extends ShopCountArgs>(
      args?: Subset<T, ShopCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopAggregateArgs>(args: Subset<T, ShopAggregateArgs>): Prisma.PrismaPromise<GetShopAggregateType<T>>

    /**
     * Group by Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopGroupByArgs['orderBy'] }
        : { orderBy?: ShopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shop model
   */
  readonly fields: ShopFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShopClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    productsProductsShop<T extends Shop$productsProductsShopArgs<ExtArgs> = {}>(args?: Subset<T, Shop$productsProductsShopArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductsShopPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Shop model
   */ 
  interface ShopFieldRefs {
    readonly id: FieldRef<"Shop", 'Int'>
    readonly shopName: FieldRef<"Shop", 'String'>
    readonly password: FieldRef<"Shop", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Shop findUnique
   */
  export type ShopFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where: ShopWhereUniqueInput
  }


  /**
   * Shop findUniqueOrThrow
   */
  export type ShopFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where: ShopWhereUniqueInput
  }


  /**
   * Shop findFirst
   */
  export type ShopFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shops.
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shops.
     */
    distinct?: ShopScalarFieldEnum | ShopScalarFieldEnum[]
  }


  /**
   * Shop findFirstOrThrow
   */
  export type ShopFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shops.
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shops.
     */
    distinct?: ShopScalarFieldEnum | ShopScalarFieldEnum[]
  }


  /**
   * Shop findMany
   */
  export type ShopFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shops to fetch.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shops.
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    distinct?: ShopScalarFieldEnum | ShopScalarFieldEnum[]
  }


  /**
   * Shop create
   */
  export type ShopCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * The data needed to create a Shop.
     */
    data: XOR<ShopCreateInput, ShopUncheckedCreateInput>
  }


  /**
   * Shop createMany
   */
  export type ShopCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shops.
     */
    data: ShopCreateManyInput | ShopCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Shop update
   */
  export type ShopUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * The data needed to update a Shop.
     */
    data: XOR<ShopUpdateInput, ShopUncheckedUpdateInput>
    /**
     * Choose, which Shop to update.
     */
    where: ShopWhereUniqueInput
  }


  /**
   * Shop updateMany
   */
  export type ShopUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shops.
     */
    data: XOR<ShopUpdateManyMutationInput, ShopUncheckedUpdateManyInput>
    /**
     * Filter which Shops to update
     */
    where?: ShopWhereInput
  }


  /**
   * Shop upsert
   */
  export type ShopUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * The filter to search for the Shop to update in case it exists.
     */
    where: ShopWhereUniqueInput
    /**
     * In case the Shop found by the `where` argument doesn't exist, create a new Shop with this data.
     */
    create: XOR<ShopCreateInput, ShopUncheckedCreateInput>
    /**
     * In case the Shop was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShopUpdateInput, ShopUncheckedUpdateInput>
  }


  /**
   * Shop delete
   */
  export type ShopDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter which Shop to delete.
     */
    where: ShopWhereUniqueInput
  }


  /**
   * Shop deleteMany
   */
  export type ShopDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shops to delete
     */
    where?: ShopWhereInput
  }


  /**
   * Shop.productsProductsShop
   */
  export type Shop$productsProductsShopArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsShop
     */
    select?: ProductsShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsShopInclude<ExtArgs> | null
    where?: ProductsShopWhereInput
    orderBy?: ProductsShopOrderByWithRelationInput | ProductsShopOrderByWithRelationInput[]
    cursor?: ProductsShopWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsShopScalarFieldEnum | ProductsShopScalarFieldEnum[]
  }


  /**
   * Shop without action
   */
  export type ShopDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShopInclude<ExtArgs> | null
  }



  /**
   * Model ProductsShop
   */

  export type AggregateProductsShop = {
    _count: ProductsShopCountAggregateOutputType | null
    _avg: ProductsShopAvgAggregateOutputType | null
    _sum: ProductsShopSumAggregateOutputType | null
    _min: ProductsShopMinAggregateOutputType | null
    _max: ProductsShopMaxAggregateOutputType | null
  }

  export type ProductsShopAvgAggregateOutputType = {
    id: number | null
    shopId: number | null
    productPrice: number | null
  }

  export type ProductsShopSumAggregateOutputType = {
    id: number | null
    shopId: number | null
    productPrice: number | null
  }

  export type ProductsShopMinAggregateOutputType = {
    id: number | null
    shopId: number | null
    productName: string | null
    productPrice: number | null
  }

  export type ProductsShopMaxAggregateOutputType = {
    id: number | null
    shopId: number | null
    productName: string | null
    productPrice: number | null
  }

  export type ProductsShopCountAggregateOutputType = {
    id: number
    shopId: number
    productName: number
    productPrice: number
    _all: number
  }


  export type ProductsShopAvgAggregateInputType = {
    id?: true
    shopId?: true
    productPrice?: true
  }

  export type ProductsShopSumAggregateInputType = {
    id?: true
    shopId?: true
    productPrice?: true
  }

  export type ProductsShopMinAggregateInputType = {
    id?: true
    shopId?: true
    productName?: true
    productPrice?: true
  }

  export type ProductsShopMaxAggregateInputType = {
    id?: true
    shopId?: true
    productName?: true
    productPrice?: true
  }

  export type ProductsShopCountAggregateInputType = {
    id?: true
    shopId?: true
    productName?: true
    productPrice?: true
    _all?: true
  }

  export type ProductsShopAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductsShop to aggregate.
     */
    where?: ProductsShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsShops to fetch.
     */
    orderBy?: ProductsShopOrderByWithRelationInput | ProductsShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductsShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsShops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsShops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductsShops
    **/
    _count?: true | ProductsShopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsShopAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsShopSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsShopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsShopMaxAggregateInputType
  }

  export type GetProductsShopAggregateType<T extends ProductsShopAggregateArgs> = {
        [P in keyof T & keyof AggregateProductsShop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductsShop[P]>
      : GetScalarType<T[P], AggregateProductsShop[P]>
  }




  export type ProductsShopGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductsShopWhereInput
    orderBy?: ProductsShopOrderByWithAggregationInput | ProductsShopOrderByWithAggregationInput[]
    by: ProductsShopScalarFieldEnum[] | ProductsShopScalarFieldEnum
    having?: ProductsShopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsShopCountAggregateInputType | true
    _avg?: ProductsShopAvgAggregateInputType
    _sum?: ProductsShopSumAggregateInputType
    _min?: ProductsShopMinAggregateInputType
    _max?: ProductsShopMaxAggregateInputType
  }

  export type ProductsShopGroupByOutputType = {
    id: number
    shopId: number
    productName: string
    productPrice: number
    _count: ProductsShopCountAggregateOutputType | null
    _avg: ProductsShopAvgAggregateOutputType | null
    _sum: ProductsShopSumAggregateOutputType | null
    _min: ProductsShopMinAggregateOutputType | null
    _max: ProductsShopMaxAggregateOutputType | null
  }

  type GetProductsShopGroupByPayload<T extends ProductsShopGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductsShopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsShopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsShopGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsShopGroupByOutputType[P]>
        }
      >
    >


  export type ProductsShopSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopId?: boolean
    productName?: boolean
    productPrice?: boolean
    shop?: boolean | ShopDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productsShop"]>

  export type ProductsShopSelectScalar = {
    id?: boolean
    shopId?: boolean
    productName?: boolean
    productPrice?: boolean
  }

  export type ProductsShopInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shop?: boolean | ShopDefaultArgs<ExtArgs>
  }


  export type $ProductsShopPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductsShop"
    objects: {
      shop: Prisma.$ShopPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      shopId: number
      productName: string
      productPrice: number
    }, ExtArgs["result"]["productsShop"]>
    composites: {}
  }


  type ProductsShopGetPayload<S extends boolean | null | undefined | ProductsShopDefaultArgs> = $Result.GetResult<Prisma.$ProductsShopPayload, S>

  type ProductsShopCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductsShopFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductsShopCountAggregateInputType | true
    }

  export interface ProductsShopDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductsShop'], meta: { name: 'ProductsShop' } }
    /**
     * Find zero or one ProductsShop that matches the filter.
     * @param {ProductsShopFindUniqueArgs} args - Arguments to find a ProductsShop
     * @example
     * // Get one ProductsShop
     * const productsShop = await prisma.productsShop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductsShopFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsShopFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductsShopClient<$Result.GetResult<Prisma.$ProductsShopPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductsShop that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductsShopFindUniqueOrThrowArgs} args - Arguments to find a ProductsShop
     * @example
     * // Get one ProductsShop
     * const productsShop = await prisma.productsShop.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductsShopFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsShopFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductsShopClient<$Result.GetResult<Prisma.$ProductsShopPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductsShop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsShopFindFirstArgs} args - Arguments to find a ProductsShop
     * @example
     * // Get one ProductsShop
     * const productsShop = await prisma.productsShop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductsShopFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsShopFindFirstArgs<ExtArgs>>
    ): Prisma__ProductsShopClient<$Result.GetResult<Prisma.$ProductsShopPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductsShop that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsShopFindFirstOrThrowArgs} args - Arguments to find a ProductsShop
     * @example
     * // Get one ProductsShop
     * const productsShop = await prisma.productsShop.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductsShopFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsShopFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductsShopClient<$Result.GetResult<Prisma.$ProductsShopPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductsShops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsShopFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductsShops
     * const productsShops = await prisma.productsShop.findMany()
     * 
     * // Get first 10 ProductsShops
     * const productsShops = await prisma.productsShop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsShopWithIdOnly = await prisma.productsShop.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductsShopFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsShopFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductsShopPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductsShop.
     * @param {ProductsShopCreateArgs} args - Arguments to create a ProductsShop.
     * @example
     * // Create one ProductsShop
     * const ProductsShop = await prisma.productsShop.create({
     *   data: {
     *     // ... data to create a ProductsShop
     *   }
     * })
     * 
    **/
    create<T extends ProductsShopCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsShopCreateArgs<ExtArgs>>
    ): Prisma__ProductsShopClient<$Result.GetResult<Prisma.$ProductsShopPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProductsShops.
     *     @param {ProductsShopCreateManyArgs} args - Arguments to create many ProductsShops.
     *     @example
     *     // Create many ProductsShops
     *     const productsShop = await prisma.productsShop.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductsShopCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsShopCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductsShop.
     * @param {ProductsShopDeleteArgs} args - Arguments to delete one ProductsShop.
     * @example
     * // Delete one ProductsShop
     * const ProductsShop = await prisma.productsShop.delete({
     *   where: {
     *     // ... filter to delete one ProductsShop
     *   }
     * })
     * 
    **/
    delete<T extends ProductsShopDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsShopDeleteArgs<ExtArgs>>
    ): Prisma__ProductsShopClient<$Result.GetResult<Prisma.$ProductsShopPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductsShop.
     * @param {ProductsShopUpdateArgs} args - Arguments to update one ProductsShop.
     * @example
     * // Update one ProductsShop
     * const productsShop = await prisma.productsShop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductsShopUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsShopUpdateArgs<ExtArgs>>
    ): Prisma__ProductsShopClient<$Result.GetResult<Prisma.$ProductsShopPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductsShops.
     * @param {ProductsShopDeleteManyArgs} args - Arguments to filter ProductsShops to delete.
     * @example
     * // Delete a few ProductsShops
     * const { count } = await prisma.productsShop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductsShopDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsShopDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductsShops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsShopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductsShops
     * const productsShop = await prisma.productsShop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductsShopUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsShopUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductsShop.
     * @param {ProductsShopUpsertArgs} args - Arguments to update or create a ProductsShop.
     * @example
     * // Update or create a ProductsShop
     * const productsShop = await prisma.productsShop.upsert({
     *   create: {
     *     // ... data to create a ProductsShop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductsShop we want to update
     *   }
     * })
    **/
    upsert<T extends ProductsShopUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsShopUpsertArgs<ExtArgs>>
    ): Prisma__ProductsShopClient<$Result.GetResult<Prisma.$ProductsShopPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProductsShops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsShopCountArgs} args - Arguments to filter ProductsShops to count.
     * @example
     * // Count the number of ProductsShops
     * const count = await prisma.productsShop.count({
     *   where: {
     *     // ... the filter for the ProductsShops we want to count
     *   }
     * })
    **/
    count<T extends ProductsShopCountArgs>(
      args?: Subset<T, ProductsShopCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsShopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductsShop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsShopAggregateArgs>(args: Subset<T, ProductsShopAggregateArgs>): Prisma.PrismaPromise<GetProductsShopAggregateType<T>>

    /**
     * Group by ProductsShop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsShopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductsShopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductsShopGroupByArgs['orderBy'] }
        : { orderBy?: ProductsShopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductsShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsShopGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductsShop model
   */
  readonly fields: ProductsShopFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductsShop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductsShopClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    shop<T extends ShopDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShopDefaultArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProductsShop model
   */ 
  interface ProductsShopFieldRefs {
    readonly id: FieldRef<"ProductsShop", 'Int'>
    readonly shopId: FieldRef<"ProductsShop", 'Int'>
    readonly productName: FieldRef<"ProductsShop", 'String'>
    readonly productPrice: FieldRef<"ProductsShop", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * ProductsShop findUnique
   */
  export type ProductsShopFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsShop
     */
    select?: ProductsShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsShopInclude<ExtArgs> | null
    /**
     * Filter, which ProductsShop to fetch.
     */
    where: ProductsShopWhereUniqueInput
  }


  /**
   * ProductsShop findUniqueOrThrow
   */
  export type ProductsShopFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsShop
     */
    select?: ProductsShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsShopInclude<ExtArgs> | null
    /**
     * Filter, which ProductsShop to fetch.
     */
    where: ProductsShopWhereUniqueInput
  }


  /**
   * ProductsShop findFirst
   */
  export type ProductsShopFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsShop
     */
    select?: ProductsShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsShopInclude<ExtArgs> | null
    /**
     * Filter, which ProductsShop to fetch.
     */
    where?: ProductsShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsShops to fetch.
     */
    orderBy?: ProductsShopOrderByWithRelationInput | ProductsShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductsShops.
     */
    cursor?: ProductsShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsShops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsShops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductsShops.
     */
    distinct?: ProductsShopScalarFieldEnum | ProductsShopScalarFieldEnum[]
  }


  /**
   * ProductsShop findFirstOrThrow
   */
  export type ProductsShopFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsShop
     */
    select?: ProductsShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsShopInclude<ExtArgs> | null
    /**
     * Filter, which ProductsShop to fetch.
     */
    where?: ProductsShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsShops to fetch.
     */
    orderBy?: ProductsShopOrderByWithRelationInput | ProductsShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductsShops.
     */
    cursor?: ProductsShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsShops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsShops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductsShops.
     */
    distinct?: ProductsShopScalarFieldEnum | ProductsShopScalarFieldEnum[]
  }


  /**
   * ProductsShop findMany
   */
  export type ProductsShopFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsShop
     */
    select?: ProductsShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsShopInclude<ExtArgs> | null
    /**
     * Filter, which ProductsShops to fetch.
     */
    where?: ProductsShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsShops to fetch.
     */
    orderBy?: ProductsShopOrderByWithRelationInput | ProductsShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductsShops.
     */
    cursor?: ProductsShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsShops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsShops.
     */
    skip?: number
    distinct?: ProductsShopScalarFieldEnum | ProductsShopScalarFieldEnum[]
  }


  /**
   * ProductsShop create
   */
  export type ProductsShopCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsShop
     */
    select?: ProductsShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsShopInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductsShop.
     */
    data: XOR<ProductsShopCreateInput, ProductsShopUncheckedCreateInput>
  }


  /**
   * ProductsShop createMany
   */
  export type ProductsShopCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductsShops.
     */
    data: ProductsShopCreateManyInput | ProductsShopCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProductsShop update
   */
  export type ProductsShopUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsShop
     */
    select?: ProductsShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsShopInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductsShop.
     */
    data: XOR<ProductsShopUpdateInput, ProductsShopUncheckedUpdateInput>
    /**
     * Choose, which ProductsShop to update.
     */
    where: ProductsShopWhereUniqueInput
  }


  /**
   * ProductsShop updateMany
   */
  export type ProductsShopUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductsShops.
     */
    data: XOR<ProductsShopUpdateManyMutationInput, ProductsShopUncheckedUpdateManyInput>
    /**
     * Filter which ProductsShops to update
     */
    where?: ProductsShopWhereInput
  }


  /**
   * ProductsShop upsert
   */
  export type ProductsShopUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsShop
     */
    select?: ProductsShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsShopInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductsShop to update in case it exists.
     */
    where: ProductsShopWhereUniqueInput
    /**
     * In case the ProductsShop found by the `where` argument doesn't exist, create a new ProductsShop with this data.
     */
    create: XOR<ProductsShopCreateInput, ProductsShopUncheckedCreateInput>
    /**
     * In case the ProductsShop was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductsShopUpdateInput, ProductsShopUncheckedUpdateInput>
  }


  /**
   * ProductsShop delete
   */
  export type ProductsShopDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsShop
     */
    select?: ProductsShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsShopInclude<ExtArgs> | null
    /**
     * Filter which ProductsShop to delete.
     */
    where: ProductsShopWhereUniqueInput
  }


  /**
   * ProductsShop deleteMany
   */
  export type ProductsShopDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductsShops to delete
     */
    where?: ProductsShopWhereInput
  }


  /**
   * ProductsShop without action
   */
  export type ProductsShopDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsShop
     */
    select?: ProductsShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsShopInclude<ExtArgs> | null
  }



  /**
   * Model ProductsCustomer
   */

  export type AggregateProductsCustomer = {
    _count: ProductsCustomerCountAggregateOutputType | null
    _avg: ProductsCustomerAvgAggregateOutputType | null
    _sum: ProductsCustomerSumAggregateOutputType | null
    _min: ProductsCustomerMinAggregateOutputType | null
    _max: ProductsCustomerMaxAggregateOutputType | null
  }

  export type ProductsCustomerAvgAggregateOutputType = {
    id: number | null
    customerId: number | null
    productPrice: number | null
  }

  export type ProductsCustomerSumAggregateOutputType = {
    id: number | null
    customerId: number | null
    productPrice: number | null
  }

  export type ProductsCustomerMinAggregateOutputType = {
    id: number | null
    customerId: number | null
    productName: string | null
    productPrice: number | null
  }

  export type ProductsCustomerMaxAggregateOutputType = {
    id: number | null
    customerId: number | null
    productName: string | null
    productPrice: number | null
  }

  export type ProductsCustomerCountAggregateOutputType = {
    id: number
    customerId: number
    productName: number
    productPrice: number
    _all: number
  }


  export type ProductsCustomerAvgAggregateInputType = {
    id?: true
    customerId?: true
    productPrice?: true
  }

  export type ProductsCustomerSumAggregateInputType = {
    id?: true
    customerId?: true
    productPrice?: true
  }

  export type ProductsCustomerMinAggregateInputType = {
    id?: true
    customerId?: true
    productName?: true
    productPrice?: true
  }

  export type ProductsCustomerMaxAggregateInputType = {
    id?: true
    customerId?: true
    productName?: true
    productPrice?: true
  }

  export type ProductsCustomerCountAggregateInputType = {
    id?: true
    customerId?: true
    productName?: true
    productPrice?: true
    _all?: true
  }

  export type ProductsCustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductsCustomer to aggregate.
     */
    where?: ProductsCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsCustomers to fetch.
     */
    orderBy?: ProductsCustomerOrderByWithRelationInput | ProductsCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductsCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductsCustomers
    **/
    _count?: true | ProductsCustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsCustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsCustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsCustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsCustomerMaxAggregateInputType
  }

  export type GetProductsCustomerAggregateType<T extends ProductsCustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateProductsCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductsCustomer[P]>
      : GetScalarType<T[P], AggregateProductsCustomer[P]>
  }




  export type ProductsCustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductsCustomerWhereInput
    orderBy?: ProductsCustomerOrderByWithAggregationInput | ProductsCustomerOrderByWithAggregationInput[]
    by: ProductsCustomerScalarFieldEnum[] | ProductsCustomerScalarFieldEnum
    having?: ProductsCustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCustomerCountAggregateInputType | true
    _avg?: ProductsCustomerAvgAggregateInputType
    _sum?: ProductsCustomerSumAggregateInputType
    _min?: ProductsCustomerMinAggregateInputType
    _max?: ProductsCustomerMaxAggregateInputType
  }

  export type ProductsCustomerGroupByOutputType = {
    id: number
    customerId: number
    productName: string
    productPrice: number
    _count: ProductsCustomerCountAggregateOutputType | null
    _avg: ProductsCustomerAvgAggregateOutputType | null
    _sum: ProductsCustomerSumAggregateOutputType | null
    _min: ProductsCustomerMinAggregateOutputType | null
    _max: ProductsCustomerMaxAggregateOutputType | null
  }

  type GetProductsCustomerGroupByPayload<T extends ProductsCustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductsCustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsCustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsCustomerGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsCustomerGroupByOutputType[P]>
        }
      >
    >


  export type ProductsCustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    productName?: boolean
    productPrice?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productsCustomer"]>

  export type ProductsCustomerSelectScalar = {
    id?: boolean
    customerId?: boolean
    productName?: boolean
    productPrice?: boolean
  }

  export type ProductsCustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }


  export type $ProductsCustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductsCustomer"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      customerId: number
      productName: string
      productPrice: number
    }, ExtArgs["result"]["productsCustomer"]>
    composites: {}
  }


  type ProductsCustomerGetPayload<S extends boolean | null | undefined | ProductsCustomerDefaultArgs> = $Result.GetResult<Prisma.$ProductsCustomerPayload, S>

  type ProductsCustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductsCustomerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductsCustomerCountAggregateInputType | true
    }

  export interface ProductsCustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductsCustomer'], meta: { name: 'ProductsCustomer' } }
    /**
     * Find zero or one ProductsCustomer that matches the filter.
     * @param {ProductsCustomerFindUniqueArgs} args - Arguments to find a ProductsCustomer
     * @example
     * // Get one ProductsCustomer
     * const productsCustomer = await prisma.productsCustomer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductsCustomerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsCustomerFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductsCustomerClient<$Result.GetResult<Prisma.$ProductsCustomerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductsCustomer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductsCustomerFindUniqueOrThrowArgs} args - Arguments to find a ProductsCustomer
     * @example
     * // Get one ProductsCustomer
     * const productsCustomer = await prisma.productsCustomer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductsCustomerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsCustomerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductsCustomerClient<$Result.GetResult<Prisma.$ProductsCustomerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductsCustomer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsCustomerFindFirstArgs} args - Arguments to find a ProductsCustomer
     * @example
     * // Get one ProductsCustomer
     * const productsCustomer = await prisma.productsCustomer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductsCustomerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsCustomerFindFirstArgs<ExtArgs>>
    ): Prisma__ProductsCustomerClient<$Result.GetResult<Prisma.$ProductsCustomerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductsCustomer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsCustomerFindFirstOrThrowArgs} args - Arguments to find a ProductsCustomer
     * @example
     * // Get one ProductsCustomer
     * const productsCustomer = await prisma.productsCustomer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductsCustomerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsCustomerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductsCustomerClient<$Result.GetResult<Prisma.$ProductsCustomerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductsCustomers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsCustomerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductsCustomers
     * const productsCustomers = await prisma.productsCustomer.findMany()
     * 
     * // Get first 10 ProductsCustomers
     * const productsCustomers = await prisma.productsCustomer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsCustomerWithIdOnly = await prisma.productsCustomer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductsCustomerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsCustomerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductsCustomerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductsCustomer.
     * @param {ProductsCustomerCreateArgs} args - Arguments to create a ProductsCustomer.
     * @example
     * // Create one ProductsCustomer
     * const ProductsCustomer = await prisma.productsCustomer.create({
     *   data: {
     *     // ... data to create a ProductsCustomer
     *   }
     * })
     * 
    **/
    create<T extends ProductsCustomerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsCustomerCreateArgs<ExtArgs>>
    ): Prisma__ProductsCustomerClient<$Result.GetResult<Prisma.$ProductsCustomerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProductsCustomers.
     *     @param {ProductsCustomerCreateManyArgs} args - Arguments to create many ProductsCustomers.
     *     @example
     *     // Create many ProductsCustomers
     *     const productsCustomer = await prisma.productsCustomer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductsCustomerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsCustomerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductsCustomer.
     * @param {ProductsCustomerDeleteArgs} args - Arguments to delete one ProductsCustomer.
     * @example
     * // Delete one ProductsCustomer
     * const ProductsCustomer = await prisma.productsCustomer.delete({
     *   where: {
     *     // ... filter to delete one ProductsCustomer
     *   }
     * })
     * 
    **/
    delete<T extends ProductsCustomerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsCustomerDeleteArgs<ExtArgs>>
    ): Prisma__ProductsCustomerClient<$Result.GetResult<Prisma.$ProductsCustomerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductsCustomer.
     * @param {ProductsCustomerUpdateArgs} args - Arguments to update one ProductsCustomer.
     * @example
     * // Update one ProductsCustomer
     * const productsCustomer = await prisma.productsCustomer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductsCustomerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsCustomerUpdateArgs<ExtArgs>>
    ): Prisma__ProductsCustomerClient<$Result.GetResult<Prisma.$ProductsCustomerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductsCustomers.
     * @param {ProductsCustomerDeleteManyArgs} args - Arguments to filter ProductsCustomers to delete.
     * @example
     * // Delete a few ProductsCustomers
     * const { count } = await prisma.productsCustomer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductsCustomerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsCustomerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductsCustomers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsCustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductsCustomers
     * const productsCustomer = await prisma.productsCustomer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductsCustomerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsCustomerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductsCustomer.
     * @param {ProductsCustomerUpsertArgs} args - Arguments to update or create a ProductsCustomer.
     * @example
     * // Update or create a ProductsCustomer
     * const productsCustomer = await prisma.productsCustomer.upsert({
     *   create: {
     *     // ... data to create a ProductsCustomer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductsCustomer we want to update
     *   }
     * })
    **/
    upsert<T extends ProductsCustomerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsCustomerUpsertArgs<ExtArgs>>
    ): Prisma__ProductsCustomerClient<$Result.GetResult<Prisma.$ProductsCustomerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProductsCustomers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsCustomerCountArgs} args - Arguments to filter ProductsCustomers to count.
     * @example
     * // Count the number of ProductsCustomers
     * const count = await prisma.productsCustomer.count({
     *   where: {
     *     // ... the filter for the ProductsCustomers we want to count
     *   }
     * })
    **/
    count<T extends ProductsCustomerCountArgs>(
      args?: Subset<T, ProductsCustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductsCustomer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsCustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsCustomerAggregateArgs>(args: Subset<T, ProductsCustomerAggregateArgs>): Prisma.PrismaPromise<GetProductsCustomerAggregateType<T>>

    /**
     * Group by ProductsCustomer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsCustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductsCustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductsCustomerGroupByArgs['orderBy'] }
        : { orderBy?: ProductsCustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductsCustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductsCustomer model
   */
  readonly fields: ProductsCustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductsCustomer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductsCustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProductsCustomer model
   */ 
  interface ProductsCustomerFieldRefs {
    readonly id: FieldRef<"ProductsCustomer", 'Int'>
    readonly customerId: FieldRef<"ProductsCustomer", 'Int'>
    readonly productName: FieldRef<"ProductsCustomer", 'String'>
    readonly productPrice: FieldRef<"ProductsCustomer", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * ProductsCustomer findUnique
   */
  export type ProductsCustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCustomer
     */
    select?: ProductsCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsCustomerInclude<ExtArgs> | null
    /**
     * Filter, which ProductsCustomer to fetch.
     */
    where: ProductsCustomerWhereUniqueInput
  }


  /**
   * ProductsCustomer findUniqueOrThrow
   */
  export type ProductsCustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCustomer
     */
    select?: ProductsCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsCustomerInclude<ExtArgs> | null
    /**
     * Filter, which ProductsCustomer to fetch.
     */
    where: ProductsCustomerWhereUniqueInput
  }


  /**
   * ProductsCustomer findFirst
   */
  export type ProductsCustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCustomer
     */
    select?: ProductsCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsCustomerInclude<ExtArgs> | null
    /**
     * Filter, which ProductsCustomer to fetch.
     */
    where?: ProductsCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsCustomers to fetch.
     */
    orderBy?: ProductsCustomerOrderByWithRelationInput | ProductsCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductsCustomers.
     */
    cursor?: ProductsCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductsCustomers.
     */
    distinct?: ProductsCustomerScalarFieldEnum | ProductsCustomerScalarFieldEnum[]
  }


  /**
   * ProductsCustomer findFirstOrThrow
   */
  export type ProductsCustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCustomer
     */
    select?: ProductsCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsCustomerInclude<ExtArgs> | null
    /**
     * Filter, which ProductsCustomer to fetch.
     */
    where?: ProductsCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsCustomers to fetch.
     */
    orderBy?: ProductsCustomerOrderByWithRelationInput | ProductsCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductsCustomers.
     */
    cursor?: ProductsCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductsCustomers.
     */
    distinct?: ProductsCustomerScalarFieldEnum | ProductsCustomerScalarFieldEnum[]
  }


  /**
   * ProductsCustomer findMany
   */
  export type ProductsCustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCustomer
     */
    select?: ProductsCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsCustomerInclude<ExtArgs> | null
    /**
     * Filter, which ProductsCustomers to fetch.
     */
    where?: ProductsCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsCustomers to fetch.
     */
    orderBy?: ProductsCustomerOrderByWithRelationInput | ProductsCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductsCustomers.
     */
    cursor?: ProductsCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsCustomers.
     */
    skip?: number
    distinct?: ProductsCustomerScalarFieldEnum | ProductsCustomerScalarFieldEnum[]
  }


  /**
   * ProductsCustomer create
   */
  export type ProductsCustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCustomer
     */
    select?: ProductsCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsCustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductsCustomer.
     */
    data: XOR<ProductsCustomerCreateInput, ProductsCustomerUncheckedCreateInput>
  }


  /**
   * ProductsCustomer createMany
   */
  export type ProductsCustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductsCustomers.
     */
    data: ProductsCustomerCreateManyInput | ProductsCustomerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProductsCustomer update
   */
  export type ProductsCustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCustomer
     */
    select?: ProductsCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsCustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductsCustomer.
     */
    data: XOR<ProductsCustomerUpdateInput, ProductsCustomerUncheckedUpdateInput>
    /**
     * Choose, which ProductsCustomer to update.
     */
    where: ProductsCustomerWhereUniqueInput
  }


  /**
   * ProductsCustomer updateMany
   */
  export type ProductsCustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductsCustomers.
     */
    data: XOR<ProductsCustomerUpdateManyMutationInput, ProductsCustomerUncheckedUpdateManyInput>
    /**
     * Filter which ProductsCustomers to update
     */
    where?: ProductsCustomerWhereInput
  }


  /**
   * ProductsCustomer upsert
   */
  export type ProductsCustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCustomer
     */
    select?: ProductsCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsCustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductsCustomer to update in case it exists.
     */
    where: ProductsCustomerWhereUniqueInput
    /**
     * In case the ProductsCustomer found by the `where` argument doesn't exist, create a new ProductsCustomer with this data.
     */
    create: XOR<ProductsCustomerCreateInput, ProductsCustomerUncheckedCreateInput>
    /**
     * In case the ProductsCustomer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductsCustomerUpdateInput, ProductsCustomerUncheckedUpdateInput>
  }


  /**
   * ProductsCustomer delete
   */
  export type ProductsCustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCustomer
     */
    select?: ProductsCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsCustomerInclude<ExtArgs> | null
    /**
     * Filter which ProductsCustomer to delete.
     */
    where: ProductsCustomerWhereUniqueInput
  }


  /**
   * ProductsCustomer deleteMany
   */
  export type ProductsCustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductsCustomers to delete
     */
    where?: ProductsCustomerWhereInput
  }


  /**
   * ProductsCustomer without action
   */
  export type ProductsCustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCustomer
     */
    select?: ProductsCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsCustomerInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const ShopScalarFieldEnum: {
    id: 'id',
    shopName: 'shopName',
    password: 'password'
  };

  export type ShopScalarFieldEnum = (typeof ShopScalarFieldEnum)[keyof typeof ShopScalarFieldEnum]


  export const ProductsShopScalarFieldEnum: {
    id: 'id',
    shopId: 'shopId',
    productName: 'productName',
    productPrice: 'productPrice'
  };

  export type ProductsShopScalarFieldEnum = (typeof ProductsShopScalarFieldEnum)[keyof typeof ProductsShopScalarFieldEnum]


  export const ProductsCustomerScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    productName: 'productName',
    productPrice: 'productPrice'
  };

  export type ProductsCustomerScalarFieldEnum = (typeof ProductsCustomerScalarFieldEnum)[keyof typeof ProductsCustomerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: IntFilter<"Customer"> | number
    email?: StringFilter<"Customer"> | string
    password?: StringFilter<"Customer"> | string
    productsProductsCustomer?: ProductsCustomerListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    productsProductsCustomer?: ProductsCustomerOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    password?: StringFilter<"Customer"> | string
    productsProductsCustomer?: ProductsCustomerListRelationFilter
  }, "id" | "email">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Customer"> | number
    email?: StringWithAggregatesFilter<"Customer"> | string
    password?: StringWithAggregatesFilter<"Customer"> | string
  }

  export type ShopWhereInput = {
    AND?: ShopWhereInput | ShopWhereInput[]
    OR?: ShopWhereInput[]
    NOT?: ShopWhereInput | ShopWhereInput[]
    id?: IntFilter<"Shop"> | number
    shopName?: StringFilter<"Shop"> | string
    password?: StringFilter<"Shop"> | string
    productsProductsShop?: ProductsShopListRelationFilter
  }

  export type ShopOrderByWithRelationInput = {
    id?: SortOrder
    shopName?: SortOrder
    password?: SortOrder
    productsProductsShop?: ProductsShopOrderByRelationAggregateInput
  }

  export type ShopWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    shopName?: string
    AND?: ShopWhereInput | ShopWhereInput[]
    OR?: ShopWhereInput[]
    NOT?: ShopWhereInput | ShopWhereInput[]
    password?: StringFilter<"Shop"> | string
    productsProductsShop?: ProductsShopListRelationFilter
  }, "id" | "shopName">

  export type ShopOrderByWithAggregationInput = {
    id?: SortOrder
    shopName?: SortOrder
    password?: SortOrder
    _count?: ShopCountOrderByAggregateInput
    _avg?: ShopAvgOrderByAggregateInput
    _max?: ShopMaxOrderByAggregateInput
    _min?: ShopMinOrderByAggregateInput
    _sum?: ShopSumOrderByAggregateInput
  }

  export type ShopScalarWhereWithAggregatesInput = {
    AND?: ShopScalarWhereWithAggregatesInput | ShopScalarWhereWithAggregatesInput[]
    OR?: ShopScalarWhereWithAggregatesInput[]
    NOT?: ShopScalarWhereWithAggregatesInput | ShopScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Shop"> | number
    shopName?: StringWithAggregatesFilter<"Shop"> | string
    password?: StringWithAggregatesFilter<"Shop"> | string
  }

  export type ProductsShopWhereInput = {
    AND?: ProductsShopWhereInput | ProductsShopWhereInput[]
    OR?: ProductsShopWhereInput[]
    NOT?: ProductsShopWhereInput | ProductsShopWhereInput[]
    id?: IntFilter<"ProductsShop"> | number
    shopId?: IntFilter<"ProductsShop"> | number
    productName?: StringFilter<"ProductsShop"> | string
    productPrice?: IntFilter<"ProductsShop"> | number
    shop?: XOR<ShopRelationFilter, ShopWhereInput>
  }

  export type ProductsShopOrderByWithRelationInput = {
    id?: SortOrder
    shopId?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    shop?: ShopOrderByWithRelationInput
  }

  export type ProductsShopWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductsShopWhereInput | ProductsShopWhereInput[]
    OR?: ProductsShopWhereInput[]
    NOT?: ProductsShopWhereInput | ProductsShopWhereInput[]
    shopId?: IntFilter<"ProductsShop"> | number
    productName?: StringFilter<"ProductsShop"> | string
    productPrice?: IntFilter<"ProductsShop"> | number
    shop?: XOR<ShopRelationFilter, ShopWhereInput>
  }, "id">

  export type ProductsShopOrderByWithAggregationInput = {
    id?: SortOrder
    shopId?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    _count?: ProductsShopCountOrderByAggregateInput
    _avg?: ProductsShopAvgOrderByAggregateInput
    _max?: ProductsShopMaxOrderByAggregateInput
    _min?: ProductsShopMinOrderByAggregateInput
    _sum?: ProductsShopSumOrderByAggregateInput
  }

  export type ProductsShopScalarWhereWithAggregatesInput = {
    AND?: ProductsShopScalarWhereWithAggregatesInput | ProductsShopScalarWhereWithAggregatesInput[]
    OR?: ProductsShopScalarWhereWithAggregatesInput[]
    NOT?: ProductsShopScalarWhereWithAggregatesInput | ProductsShopScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductsShop"> | number
    shopId?: IntWithAggregatesFilter<"ProductsShop"> | number
    productName?: StringWithAggregatesFilter<"ProductsShop"> | string
    productPrice?: IntWithAggregatesFilter<"ProductsShop"> | number
  }

  export type ProductsCustomerWhereInput = {
    AND?: ProductsCustomerWhereInput | ProductsCustomerWhereInput[]
    OR?: ProductsCustomerWhereInput[]
    NOT?: ProductsCustomerWhereInput | ProductsCustomerWhereInput[]
    id?: IntFilter<"ProductsCustomer"> | number
    customerId?: IntFilter<"ProductsCustomer"> | number
    productName?: StringFilter<"ProductsCustomer"> | string
    productPrice?: IntFilter<"ProductsCustomer"> | number
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }

  export type ProductsCustomerOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    customer?: CustomerOrderByWithRelationInput
  }

  export type ProductsCustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductsCustomerWhereInput | ProductsCustomerWhereInput[]
    OR?: ProductsCustomerWhereInput[]
    NOT?: ProductsCustomerWhereInput | ProductsCustomerWhereInput[]
    customerId?: IntFilter<"ProductsCustomer"> | number
    productName?: StringFilter<"ProductsCustomer"> | string
    productPrice?: IntFilter<"ProductsCustomer"> | number
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }, "id">

  export type ProductsCustomerOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    _count?: ProductsCustomerCountOrderByAggregateInput
    _avg?: ProductsCustomerAvgOrderByAggregateInput
    _max?: ProductsCustomerMaxOrderByAggregateInput
    _min?: ProductsCustomerMinOrderByAggregateInput
    _sum?: ProductsCustomerSumOrderByAggregateInput
  }

  export type ProductsCustomerScalarWhereWithAggregatesInput = {
    AND?: ProductsCustomerScalarWhereWithAggregatesInput | ProductsCustomerScalarWhereWithAggregatesInput[]
    OR?: ProductsCustomerScalarWhereWithAggregatesInput[]
    NOT?: ProductsCustomerScalarWhereWithAggregatesInput | ProductsCustomerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductsCustomer"> | number
    customerId?: IntWithAggregatesFilter<"ProductsCustomer"> | number
    productName?: StringWithAggregatesFilter<"ProductsCustomer"> | string
    productPrice?: IntWithAggregatesFilter<"ProductsCustomer"> | number
  }

  export type CustomerCreateInput = {
    email: string
    password: string
    productsProductsCustomer?: ProductsCustomerCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    productsProductsCustomer?: ProductsCustomerUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    productsProductsCustomer?: ProductsCustomerUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    productsProductsCustomer?: ProductsCustomerUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: number
    email: string
    password: string
  }

  export type CustomerUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ShopCreateInput = {
    shopName: string
    password: string
    productsProductsShop?: ProductsShopCreateNestedManyWithoutShopInput
  }

  export type ShopUncheckedCreateInput = {
    id?: number
    shopName: string
    password: string
    productsProductsShop?: ProductsShopUncheckedCreateNestedManyWithoutShopInput
  }

  export type ShopUpdateInput = {
    shopName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    productsProductsShop?: ProductsShopUpdateManyWithoutShopNestedInput
  }

  export type ShopUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    shopName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    productsProductsShop?: ProductsShopUncheckedUpdateManyWithoutShopNestedInput
  }

  export type ShopCreateManyInput = {
    id?: number
    shopName: string
    password: string
  }

  export type ShopUpdateManyMutationInput = {
    shopName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ShopUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    shopName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ProductsShopCreateInput = {
    productName: string
    productPrice: number
    shop: ShopCreateNestedOneWithoutProductsProductsShopInput
  }

  export type ProductsShopUncheckedCreateInput = {
    id?: number
    shopId: number
    productName: string
    productPrice: number
  }

  export type ProductsShopUpdateInput = {
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: IntFieldUpdateOperationsInput | number
    shop?: ShopUpdateOneRequiredWithoutProductsProductsShopNestedInput
  }

  export type ProductsShopUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    shopId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: IntFieldUpdateOperationsInput | number
  }

  export type ProductsShopCreateManyInput = {
    id?: number
    shopId: number
    productName: string
    productPrice: number
  }

  export type ProductsShopUpdateManyMutationInput = {
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: IntFieldUpdateOperationsInput | number
  }

  export type ProductsShopUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    shopId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: IntFieldUpdateOperationsInput | number
  }

  export type ProductsCustomerCreateInput = {
    productName: string
    productPrice: number
    customer: CustomerCreateNestedOneWithoutProductsProductsCustomerInput
  }

  export type ProductsCustomerUncheckedCreateInput = {
    id?: number
    customerId: number
    productName: string
    productPrice: number
  }

  export type ProductsCustomerUpdateInput = {
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: IntFieldUpdateOperationsInput | number
    customer?: CustomerUpdateOneRequiredWithoutProductsProductsCustomerNestedInput
  }

  export type ProductsCustomerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: IntFieldUpdateOperationsInput | number
  }

  export type ProductsCustomerCreateManyInput = {
    id?: number
    customerId: number
    productName: string
    productPrice: number
  }

  export type ProductsCustomerUpdateManyMutationInput = {
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: IntFieldUpdateOperationsInput | number
  }

  export type ProductsCustomerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ProductsCustomerListRelationFilter = {
    every?: ProductsCustomerWhereInput
    some?: ProductsCustomerWhereInput
    none?: ProductsCustomerWhereInput
  }

  export type ProductsCustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ProductsShopListRelationFilter = {
    every?: ProductsShopWhereInput
    some?: ProductsShopWhereInput
    none?: ProductsShopWhereInput
  }

  export type ProductsShopOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShopCountOrderByAggregateInput = {
    id?: SortOrder
    shopName?: SortOrder
    password?: SortOrder
  }

  export type ShopAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ShopMaxOrderByAggregateInput = {
    id?: SortOrder
    shopName?: SortOrder
    password?: SortOrder
  }

  export type ShopMinOrderByAggregateInput = {
    id?: SortOrder
    shopName?: SortOrder
    password?: SortOrder
  }

  export type ShopSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ShopRelationFilter = {
    is?: ShopWhereInput
    isNot?: ShopWhereInput
  }

  export type ProductsShopCountOrderByAggregateInput = {
    id?: SortOrder
    shopId?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
  }

  export type ProductsShopAvgOrderByAggregateInput = {
    id?: SortOrder
    shopId?: SortOrder
    productPrice?: SortOrder
  }

  export type ProductsShopMaxOrderByAggregateInput = {
    id?: SortOrder
    shopId?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
  }

  export type ProductsShopMinOrderByAggregateInput = {
    id?: SortOrder
    shopId?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
  }

  export type ProductsShopSumOrderByAggregateInput = {
    id?: SortOrder
    shopId?: SortOrder
    productPrice?: SortOrder
  }

  export type CustomerRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type ProductsCustomerCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
  }

  export type ProductsCustomerAvgOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    productPrice?: SortOrder
  }

  export type ProductsCustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
  }

  export type ProductsCustomerMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
  }

  export type ProductsCustomerSumOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    productPrice?: SortOrder
  }

  export type ProductsCustomerCreateNestedManyWithoutCustomerInput = {
    create?: XOR<ProductsCustomerCreateWithoutCustomerInput, ProductsCustomerUncheckedCreateWithoutCustomerInput> | ProductsCustomerCreateWithoutCustomerInput[] | ProductsCustomerUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ProductsCustomerCreateOrConnectWithoutCustomerInput | ProductsCustomerCreateOrConnectWithoutCustomerInput[]
    createMany?: ProductsCustomerCreateManyCustomerInputEnvelope
    connect?: ProductsCustomerWhereUniqueInput | ProductsCustomerWhereUniqueInput[]
  }

  export type ProductsCustomerUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<ProductsCustomerCreateWithoutCustomerInput, ProductsCustomerUncheckedCreateWithoutCustomerInput> | ProductsCustomerCreateWithoutCustomerInput[] | ProductsCustomerUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ProductsCustomerCreateOrConnectWithoutCustomerInput | ProductsCustomerCreateOrConnectWithoutCustomerInput[]
    createMany?: ProductsCustomerCreateManyCustomerInputEnvelope
    connect?: ProductsCustomerWhereUniqueInput | ProductsCustomerWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ProductsCustomerUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<ProductsCustomerCreateWithoutCustomerInput, ProductsCustomerUncheckedCreateWithoutCustomerInput> | ProductsCustomerCreateWithoutCustomerInput[] | ProductsCustomerUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ProductsCustomerCreateOrConnectWithoutCustomerInput | ProductsCustomerCreateOrConnectWithoutCustomerInput[]
    upsert?: ProductsCustomerUpsertWithWhereUniqueWithoutCustomerInput | ProductsCustomerUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: ProductsCustomerCreateManyCustomerInputEnvelope
    set?: ProductsCustomerWhereUniqueInput | ProductsCustomerWhereUniqueInput[]
    disconnect?: ProductsCustomerWhereUniqueInput | ProductsCustomerWhereUniqueInput[]
    delete?: ProductsCustomerWhereUniqueInput | ProductsCustomerWhereUniqueInput[]
    connect?: ProductsCustomerWhereUniqueInput | ProductsCustomerWhereUniqueInput[]
    update?: ProductsCustomerUpdateWithWhereUniqueWithoutCustomerInput | ProductsCustomerUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: ProductsCustomerUpdateManyWithWhereWithoutCustomerInput | ProductsCustomerUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: ProductsCustomerScalarWhereInput | ProductsCustomerScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductsCustomerUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<ProductsCustomerCreateWithoutCustomerInput, ProductsCustomerUncheckedCreateWithoutCustomerInput> | ProductsCustomerCreateWithoutCustomerInput[] | ProductsCustomerUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ProductsCustomerCreateOrConnectWithoutCustomerInput | ProductsCustomerCreateOrConnectWithoutCustomerInput[]
    upsert?: ProductsCustomerUpsertWithWhereUniqueWithoutCustomerInput | ProductsCustomerUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: ProductsCustomerCreateManyCustomerInputEnvelope
    set?: ProductsCustomerWhereUniqueInput | ProductsCustomerWhereUniqueInput[]
    disconnect?: ProductsCustomerWhereUniqueInput | ProductsCustomerWhereUniqueInput[]
    delete?: ProductsCustomerWhereUniqueInput | ProductsCustomerWhereUniqueInput[]
    connect?: ProductsCustomerWhereUniqueInput | ProductsCustomerWhereUniqueInput[]
    update?: ProductsCustomerUpdateWithWhereUniqueWithoutCustomerInput | ProductsCustomerUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: ProductsCustomerUpdateManyWithWhereWithoutCustomerInput | ProductsCustomerUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: ProductsCustomerScalarWhereInput | ProductsCustomerScalarWhereInput[]
  }

  export type ProductsShopCreateNestedManyWithoutShopInput = {
    create?: XOR<ProductsShopCreateWithoutShopInput, ProductsShopUncheckedCreateWithoutShopInput> | ProductsShopCreateWithoutShopInput[] | ProductsShopUncheckedCreateWithoutShopInput[]
    connectOrCreate?: ProductsShopCreateOrConnectWithoutShopInput | ProductsShopCreateOrConnectWithoutShopInput[]
    createMany?: ProductsShopCreateManyShopInputEnvelope
    connect?: ProductsShopWhereUniqueInput | ProductsShopWhereUniqueInput[]
  }

  export type ProductsShopUncheckedCreateNestedManyWithoutShopInput = {
    create?: XOR<ProductsShopCreateWithoutShopInput, ProductsShopUncheckedCreateWithoutShopInput> | ProductsShopCreateWithoutShopInput[] | ProductsShopUncheckedCreateWithoutShopInput[]
    connectOrCreate?: ProductsShopCreateOrConnectWithoutShopInput | ProductsShopCreateOrConnectWithoutShopInput[]
    createMany?: ProductsShopCreateManyShopInputEnvelope
    connect?: ProductsShopWhereUniqueInput | ProductsShopWhereUniqueInput[]
  }

  export type ProductsShopUpdateManyWithoutShopNestedInput = {
    create?: XOR<ProductsShopCreateWithoutShopInput, ProductsShopUncheckedCreateWithoutShopInput> | ProductsShopCreateWithoutShopInput[] | ProductsShopUncheckedCreateWithoutShopInput[]
    connectOrCreate?: ProductsShopCreateOrConnectWithoutShopInput | ProductsShopCreateOrConnectWithoutShopInput[]
    upsert?: ProductsShopUpsertWithWhereUniqueWithoutShopInput | ProductsShopUpsertWithWhereUniqueWithoutShopInput[]
    createMany?: ProductsShopCreateManyShopInputEnvelope
    set?: ProductsShopWhereUniqueInput | ProductsShopWhereUniqueInput[]
    disconnect?: ProductsShopWhereUniqueInput | ProductsShopWhereUniqueInput[]
    delete?: ProductsShopWhereUniqueInput | ProductsShopWhereUniqueInput[]
    connect?: ProductsShopWhereUniqueInput | ProductsShopWhereUniqueInput[]
    update?: ProductsShopUpdateWithWhereUniqueWithoutShopInput | ProductsShopUpdateWithWhereUniqueWithoutShopInput[]
    updateMany?: ProductsShopUpdateManyWithWhereWithoutShopInput | ProductsShopUpdateManyWithWhereWithoutShopInput[]
    deleteMany?: ProductsShopScalarWhereInput | ProductsShopScalarWhereInput[]
  }

  export type ProductsShopUncheckedUpdateManyWithoutShopNestedInput = {
    create?: XOR<ProductsShopCreateWithoutShopInput, ProductsShopUncheckedCreateWithoutShopInput> | ProductsShopCreateWithoutShopInput[] | ProductsShopUncheckedCreateWithoutShopInput[]
    connectOrCreate?: ProductsShopCreateOrConnectWithoutShopInput | ProductsShopCreateOrConnectWithoutShopInput[]
    upsert?: ProductsShopUpsertWithWhereUniqueWithoutShopInput | ProductsShopUpsertWithWhereUniqueWithoutShopInput[]
    createMany?: ProductsShopCreateManyShopInputEnvelope
    set?: ProductsShopWhereUniqueInput | ProductsShopWhereUniqueInput[]
    disconnect?: ProductsShopWhereUniqueInput | ProductsShopWhereUniqueInput[]
    delete?: ProductsShopWhereUniqueInput | ProductsShopWhereUniqueInput[]
    connect?: ProductsShopWhereUniqueInput | ProductsShopWhereUniqueInput[]
    update?: ProductsShopUpdateWithWhereUniqueWithoutShopInput | ProductsShopUpdateWithWhereUniqueWithoutShopInput[]
    updateMany?: ProductsShopUpdateManyWithWhereWithoutShopInput | ProductsShopUpdateManyWithWhereWithoutShopInput[]
    deleteMany?: ProductsShopScalarWhereInput | ProductsShopScalarWhereInput[]
  }

  export type ShopCreateNestedOneWithoutProductsProductsShopInput = {
    create?: XOR<ShopCreateWithoutProductsProductsShopInput, ShopUncheckedCreateWithoutProductsProductsShopInput>
    connectOrCreate?: ShopCreateOrConnectWithoutProductsProductsShopInput
    connect?: ShopWhereUniqueInput
  }

  export type ShopUpdateOneRequiredWithoutProductsProductsShopNestedInput = {
    create?: XOR<ShopCreateWithoutProductsProductsShopInput, ShopUncheckedCreateWithoutProductsProductsShopInput>
    connectOrCreate?: ShopCreateOrConnectWithoutProductsProductsShopInput
    upsert?: ShopUpsertWithoutProductsProductsShopInput
    connect?: ShopWhereUniqueInput
    update?: XOR<XOR<ShopUpdateToOneWithWhereWithoutProductsProductsShopInput, ShopUpdateWithoutProductsProductsShopInput>, ShopUncheckedUpdateWithoutProductsProductsShopInput>
  }

  export type CustomerCreateNestedOneWithoutProductsProductsCustomerInput = {
    create?: XOR<CustomerCreateWithoutProductsProductsCustomerInput, CustomerUncheckedCreateWithoutProductsProductsCustomerInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutProductsProductsCustomerInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutProductsProductsCustomerNestedInput = {
    create?: XOR<CustomerCreateWithoutProductsProductsCustomerInput, CustomerUncheckedCreateWithoutProductsProductsCustomerInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutProductsProductsCustomerInput
    upsert?: CustomerUpsertWithoutProductsProductsCustomerInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutProductsProductsCustomerInput, CustomerUpdateWithoutProductsProductsCustomerInput>, CustomerUncheckedUpdateWithoutProductsProductsCustomerInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ProductsCustomerCreateWithoutCustomerInput = {
    productName: string
    productPrice: number
  }

  export type ProductsCustomerUncheckedCreateWithoutCustomerInput = {
    id?: number
    productName: string
    productPrice: number
  }

  export type ProductsCustomerCreateOrConnectWithoutCustomerInput = {
    where: ProductsCustomerWhereUniqueInput
    create: XOR<ProductsCustomerCreateWithoutCustomerInput, ProductsCustomerUncheckedCreateWithoutCustomerInput>
  }

  export type ProductsCustomerCreateManyCustomerInputEnvelope = {
    data: ProductsCustomerCreateManyCustomerInput | ProductsCustomerCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type ProductsCustomerUpsertWithWhereUniqueWithoutCustomerInput = {
    where: ProductsCustomerWhereUniqueInput
    update: XOR<ProductsCustomerUpdateWithoutCustomerInput, ProductsCustomerUncheckedUpdateWithoutCustomerInput>
    create: XOR<ProductsCustomerCreateWithoutCustomerInput, ProductsCustomerUncheckedCreateWithoutCustomerInput>
  }

  export type ProductsCustomerUpdateWithWhereUniqueWithoutCustomerInput = {
    where: ProductsCustomerWhereUniqueInput
    data: XOR<ProductsCustomerUpdateWithoutCustomerInput, ProductsCustomerUncheckedUpdateWithoutCustomerInput>
  }

  export type ProductsCustomerUpdateManyWithWhereWithoutCustomerInput = {
    where: ProductsCustomerScalarWhereInput
    data: XOR<ProductsCustomerUpdateManyMutationInput, ProductsCustomerUncheckedUpdateManyWithoutCustomerInput>
  }

  export type ProductsCustomerScalarWhereInput = {
    AND?: ProductsCustomerScalarWhereInput | ProductsCustomerScalarWhereInput[]
    OR?: ProductsCustomerScalarWhereInput[]
    NOT?: ProductsCustomerScalarWhereInput | ProductsCustomerScalarWhereInput[]
    id?: IntFilter<"ProductsCustomer"> | number
    customerId?: IntFilter<"ProductsCustomer"> | number
    productName?: StringFilter<"ProductsCustomer"> | string
    productPrice?: IntFilter<"ProductsCustomer"> | number
  }

  export type ProductsShopCreateWithoutShopInput = {
    productName: string
    productPrice: number
  }

  export type ProductsShopUncheckedCreateWithoutShopInput = {
    id?: number
    productName: string
    productPrice: number
  }

  export type ProductsShopCreateOrConnectWithoutShopInput = {
    where: ProductsShopWhereUniqueInput
    create: XOR<ProductsShopCreateWithoutShopInput, ProductsShopUncheckedCreateWithoutShopInput>
  }

  export type ProductsShopCreateManyShopInputEnvelope = {
    data: ProductsShopCreateManyShopInput | ProductsShopCreateManyShopInput[]
    skipDuplicates?: boolean
  }

  export type ProductsShopUpsertWithWhereUniqueWithoutShopInput = {
    where: ProductsShopWhereUniqueInput
    update: XOR<ProductsShopUpdateWithoutShopInput, ProductsShopUncheckedUpdateWithoutShopInput>
    create: XOR<ProductsShopCreateWithoutShopInput, ProductsShopUncheckedCreateWithoutShopInput>
  }

  export type ProductsShopUpdateWithWhereUniqueWithoutShopInput = {
    where: ProductsShopWhereUniqueInput
    data: XOR<ProductsShopUpdateWithoutShopInput, ProductsShopUncheckedUpdateWithoutShopInput>
  }

  export type ProductsShopUpdateManyWithWhereWithoutShopInput = {
    where: ProductsShopScalarWhereInput
    data: XOR<ProductsShopUpdateManyMutationInput, ProductsShopUncheckedUpdateManyWithoutShopInput>
  }

  export type ProductsShopScalarWhereInput = {
    AND?: ProductsShopScalarWhereInput | ProductsShopScalarWhereInput[]
    OR?: ProductsShopScalarWhereInput[]
    NOT?: ProductsShopScalarWhereInput | ProductsShopScalarWhereInput[]
    id?: IntFilter<"ProductsShop"> | number
    shopId?: IntFilter<"ProductsShop"> | number
    productName?: StringFilter<"ProductsShop"> | string
    productPrice?: IntFilter<"ProductsShop"> | number
  }

  export type ShopCreateWithoutProductsProductsShopInput = {
    shopName: string
    password: string
  }

  export type ShopUncheckedCreateWithoutProductsProductsShopInput = {
    id?: number
    shopName: string
    password: string
  }

  export type ShopCreateOrConnectWithoutProductsProductsShopInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutProductsProductsShopInput, ShopUncheckedCreateWithoutProductsProductsShopInput>
  }

  export type ShopUpsertWithoutProductsProductsShopInput = {
    update: XOR<ShopUpdateWithoutProductsProductsShopInput, ShopUncheckedUpdateWithoutProductsProductsShopInput>
    create: XOR<ShopCreateWithoutProductsProductsShopInput, ShopUncheckedCreateWithoutProductsProductsShopInput>
    where?: ShopWhereInput
  }

  export type ShopUpdateToOneWithWhereWithoutProductsProductsShopInput = {
    where?: ShopWhereInput
    data: XOR<ShopUpdateWithoutProductsProductsShopInput, ShopUncheckedUpdateWithoutProductsProductsShopInput>
  }

  export type ShopUpdateWithoutProductsProductsShopInput = {
    shopName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ShopUncheckedUpdateWithoutProductsProductsShopInput = {
    id?: IntFieldUpdateOperationsInput | number
    shopName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerCreateWithoutProductsProductsCustomerInput = {
    email: string
    password: string
  }

  export type CustomerUncheckedCreateWithoutProductsProductsCustomerInput = {
    id?: number
    email: string
    password: string
  }

  export type CustomerCreateOrConnectWithoutProductsProductsCustomerInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutProductsProductsCustomerInput, CustomerUncheckedCreateWithoutProductsProductsCustomerInput>
  }

  export type CustomerUpsertWithoutProductsProductsCustomerInput = {
    update: XOR<CustomerUpdateWithoutProductsProductsCustomerInput, CustomerUncheckedUpdateWithoutProductsProductsCustomerInput>
    create: XOR<CustomerCreateWithoutProductsProductsCustomerInput, CustomerUncheckedCreateWithoutProductsProductsCustomerInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutProductsProductsCustomerInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutProductsProductsCustomerInput, CustomerUncheckedUpdateWithoutProductsProductsCustomerInput>
  }

  export type CustomerUpdateWithoutProductsProductsCustomerInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerUncheckedUpdateWithoutProductsProductsCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ProductsCustomerCreateManyCustomerInput = {
    id?: number
    productName: string
    productPrice: number
  }

  export type ProductsCustomerUpdateWithoutCustomerInput = {
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: IntFieldUpdateOperationsInput | number
  }

  export type ProductsCustomerUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: IntFieldUpdateOperationsInput | number
  }

  export type ProductsCustomerUncheckedUpdateManyWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: IntFieldUpdateOperationsInput | number
  }

  export type ProductsShopCreateManyShopInput = {
    id?: number
    productName: string
    productPrice: number
  }

  export type ProductsShopUpdateWithoutShopInput = {
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: IntFieldUpdateOperationsInput | number
  }

  export type ProductsShopUncheckedUpdateWithoutShopInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: IntFieldUpdateOperationsInput | number
  }

  export type ProductsShopUncheckedUpdateManyWithoutShopInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CustomerCountOutputTypeDefaultArgs instead
     */
    export type CustomerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShopCountOutputTypeDefaultArgs instead
     */
    export type ShopCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShopCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerDefaultArgs instead
     */
    export type CustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShopDefaultArgs instead
     */
    export type ShopArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShopDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductsShopDefaultArgs instead
     */
    export type ProductsShopArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductsShopDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductsCustomerDefaultArgs instead
     */
    export type ProductsCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductsCustomerDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}